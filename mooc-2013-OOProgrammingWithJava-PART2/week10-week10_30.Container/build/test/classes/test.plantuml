@startuml

title __TEST's Class Diagram__\n

  package  {
    class A_ProductContainerTest {
        ~ klassName : String
        ~ classRef : ClassRef<Object>
        + setup()
        + classExists()
        + extendsClassContainer()
        + hasTwoParameterConstructor()
        + noRedundantVariables()
        + methodGetName()
        + methodSetName()
        + productContainerToString()
        + productContainerToStringOK1()
        + productContainerToStringOK2()
        - newProductContainer()
        - saniteettitarkastus()
        - kentta()
        - s()
    }
  }
  

  package  {
    class B_ContainerHistoryTest {
        ~ klassName : String
        ~ classRef : ClassRef<Object>
        ~ arpa : Random
        + setup()
        + classExists()
        + noInheritance()
        + noRedundantVariables()
        + hasConstructor()
        + hasMethodAdd()
        + hasMethodReset()
        + hasToString()
        - toString()
        + toStringEmptyHistory()
        + toStringWorks1()
        + toStringWorks2()
        + hasMethodMinValue()
        + hasMethodMaxValue()
        + hasMethodAverage()
        + valueCalculatedRight1()
        + valuesCalculatedRightWhenResetting()
        + valueCalculatedRight2()
        + hasMethodGreatestFluctuation()
        + hasMethodVariance()
        + greatestFluctuationCalculatedRight1()
        + greatestFluctuationCalculatedRight2()
        + greatestFluctuationCalculatedRight3()
        + greatestFluctuationCalculatedRight4()
        + varianceCalculatedRight1()
        + varianceCalculatedRight2()
        + varianceCalculatedRight3()
        - add()
        - reset()
        - minValue()
        - maxValue()
        - average()
        - greatestFluctuation()
        - variance()
        - arvoLukuja()
        - ka()
        - saniteettitarkastus()
        - kentta()
        - s()
        - newContainerHistory()
    }
  }
  

  package  {
    class C_ProductContainerRecorderTest {
        ~ klassName : String
        ~ classRef : ClassRef<Object>
        + setup()
        + classExists()
        + inheritsClassProductContainer()
        + hasThreeParameterConstructor()
        + initialVolumeIsContainersInitialVolume()
        + noRedundantVariables()
        + hasMethodHistory()
        + hasMethodAddToTheContainer()
        + hasMethodTakeFromTheContainer()
        + addAndTakeWork()
        + addAndTakeAffectHistory1()
        + addAndTakeAffectHistory2()
        + takeFromTheContainer1()
        + hasMethodPrintAnalysis()
        + printAnalysisContainsWantedLines()
        + printAnalysisWorks1()
        + printAnalysisWorks2()
        + printAnalysisContainsVarianceAndGreatestFluctuation()
        + extendedPrintAnalysisWorks1()
        + extendedPrintAnalysisWorks2()
        - newMustavaProductContainer()
        - history()
        - takeFromTheContainer()
        - printAnalysis()
        - addToTheContainer()
        - hae()
        - saniteettitarkastus()
        - kentta()
        - s()
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
